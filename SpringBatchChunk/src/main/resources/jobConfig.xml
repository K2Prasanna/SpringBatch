<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/batch   
 http://www.springframework.org/schema/batch/spring-batch-2.2.xsd   
 http://www.springframework.org/schema/beans    
 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
 http://www.springframework.org/schema/util     
      http://www.springframework.org/schema/util/spring-util-3.0.xsd  ">
	<import resource="context.xml" />
	<!-- Defining a bean -->
	<bean id="itemProcessor" class="com.cts.hc.processors.ClaimProcessor" />
	<bean id="chunkListener" class="com.cts.hc.listeners.ClaimChunkListener" />
	<bean id="stepExecutionListener" class="com.cts.hc.listeners.ClaimStepExecutionListener" />
	<batch:job id="xmlJob">
		<batch:step id="step1" next="step2">
			<batch:tasklet>
				<batch:chunk reader="xmlItemReader" writer="mysqlItemWriter"
					processor="itemProcessor" commit-interval="3">
					<batch:listeners>
						<batch:listener ref="chunkListener"></batch:listener>
					</batch:listeners>
				</batch:chunk>
			</batch:tasklet>
			<batch:listeners>
				<batch:listener ref="stepExecutionListener"></batch:listener>
			</batch:listeners>
		</batch:step>
		<batch:step id="step2">
			<batch:tasklet>
				<batch:chunk reader="dbItemReader" writer="csvItemWriter"
					processor="itemProcessor" commit-interval="3">
					<batch:listeners>
						<batch:listener ref="chunkListener"></batch:listener>
					</batch:listeners>
				</batch:chunk>
			</batch:tasklet>
			<batch:listeners>
				<batch:listener ref="stepExecutionListener">
				</batch:listener>
			</batch:listeners>
		</batch:step>

	</batch:job>

	<batch:job id="paramJob">
		<batch:step id="step3" next="step4">
			<batch:tasklet>
				<batch:chunk reader="dbPageItemReader" writer="csvItemWriter"
					processor="itemProcessor" commit-interval="3">
					<batch:listeners>
						<batch:listener ref="chunkListener"></batch:listener>
					</batch:listeners>
				</batch:chunk>
			</batch:tasklet>
			<batch:listeners>
				<batch:listener ref="stepExecutionListener">
				</batch:listener>
			</batch:listeners>
		</batch:step>
		<batch:step id="step4" next="step5">
			<batch:tasklet>
				<batch:chunk reader="dbParamItemReader" writer="xmlItemWriter"
					processor="itemProcessor" commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step5">
			<batch:tasklet>
				<batch:chunk reader="csvItemReader" writer="xmlCsvItemWriter"
					processor="itemProcessor" commit-interval="3">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>

	</batch:job>

	<bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
		<property name="fragmentRootElementName" value="claim" />
		<property name="resource" value="Claim.xml" />
		<property name="unmarshaller" ref="customUnMarshaller" />
	</bean>

	<bean id="customUnMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
		<property name="aliases">
			<util:map id="aliases">
				<entry key="claim" value="com.cts.hc.models.Claim" />
			</util:map>
		</property>
	</bean>
	<bean id="mysqlItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value> 
            <![CDATA[insert into claim(claim_id, doc, amount, 
               policyholder_name) 
               values (:claimId, :doc, :amount, :policyHolderName);]]>
			</value>
		</property>
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>


	<bean id="dbPageItemReader"
		class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource"></property>
				<property name="selectClause"
					value="select claim_id, doc, amount, policyholder_name"></property>
				<property name="fromClause" value="from sys.claim"></property>
				<property name="whereClause" value="where amount&lt;:amt"></property>
				<property name="sortKey" value="claim_id" />
			</bean>
		</property>
		<property name="pageSize" value="10"></property>
		<property name="parameterValues">
			<map>
				<entry key="amt" value="#{jobParameters['amount']}" />
			</map>
		</property>

		<property name="rowMapper">
			<bean class="com.cts.hc.mapper.ClaimDBMapper" />
		</property>
	</bean>

	<bean id="csvItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:csv/output/output.csv" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="claimId, doc, amount, policyHolderName" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="csvItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="file:csv/output/output.csv" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="claimId, doc, amount, policyHolderName" />
					</bean>
				</property>
				<property name="fieldSetMapper">
				<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
				<property name="targetType" value="com.cts.hc.models.Claim">
				</property>
				</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="dbItemReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="sql"
			value="select claim_id, doc, amount, policyholder_name from sys.claim" />
		<property name="rowMapper">
			<bean class="com.cts.hc.mapper.ClaimDBMapper" />
		</property>
	</bean>
	<bean id="dbParamItemReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql"
			value="select claim_id, doc, amount, policyholder_name from sys.claim where amount&lt;#{jobParameters['amount']}" />
		<property name="rowMapper">
			<bean class="com.cts.hc.mapper.ClaimDBMapper" />
		</property>
	</bean>

	<bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">

		<property name="resource" value="file:xml/output/claim.xml" />

		<property name="rootTagName" value="claims" />

		<property name="marshaller" ref="claimMarshaller" />

	</bean>

	<bean id="claimMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
		<property name="aliases">
			<util:map>
				<entry key="claim" value="com.cts.hc.models.Claim" />
			</util:map>
		</property>
	</bean>

	<bean id="xmlCsvItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">

		<property name="resource" value="file:xml/output/claim_csv.xml" />

		<property name="rootTagName" value="claims" />

		<property name="marshaller" ref="claimMarshaller" />

	</bean>


</beans>